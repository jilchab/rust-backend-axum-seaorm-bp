//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use sea_orm::{entity::prelude::*, Set, Unchanged};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub name: String,
    pub email: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Clone, Debug, PartialEq, Eq, Deserialize)]
pub struct OptionModel {
    pub id: Option<i32>,
    pub name: Option<String>,
    pub email: Option<String>,
}

impl OptionModel {
    pub fn get_changes(self, model: Model) -> ActiveModel {
        ActiveModel {
            id: Unchanged(model.id),
            name: match (self.name, model.name.clone()) {
                (Some(name), model_name) if name != model_name => Set(name),
                _ => Unchanged(model.name),
            },
            email: match (self.email, model.email.clone()) {
                (Some(email), model_email) if email != model_email => Set(email),
                _ => Unchanged(model.email),
            },
        }
    }
}
